# coding: utf-8
import googlemaps
gmaps=googlemaps.Client(key='AIzaSyBjSXLCqZbbrKOjvUZJxFXa4pOLYpsqdEM')
rumah=gmaps.places('fasilkom ui')
rumah
type(rumah)
results=rumah['results']
results
results[0]
len(results)
results[0]
rumah=gmaps.places('yoshinoya')
rumah
len(rumah)
len(rumah['results'])
rumah=gmaps.places('fasilkom ui')
rumah['results']
rumah=gmaps.places('Jl. Ganesha no.10')
rumah['results']
rumah=gmaps.places('Jl. Ganesha no.10 Bandung')
rumah['results']
users = []
user_a=gmaps.places('fasilkom ui')
user_a['results'][0]
users.append(user_a['results'][0])
user_b=gmaps.places('istana negara')
user_b['results'][0]
users.append(user_b['results'][0])
user_c=gmaps.places('ancol')
user_c['results'][0]
users.append(user_c['results'][0])
user_c=gmaps.places('ragunan')
user_c['results'][0]
users.append(user_c['results'][0])
users
len(users)
user_geometries=[user['geometry'] for user in users]
user_geometries
user_location=[geometry['location'] for geometry in user_geometries]
user_location
user_location[0]
user_location[0]['lat']
total_lat=0
total_long=0
for i in range(len(user_location)):
    total_lat+=user_location[i]['lat']
    total_long+=user_location[i]['lng']
    
total_lat
user_centroid={'lat':total_lat/len(user_location),'lng':total_long/len(user_location)}
user_centroid
goal_candidates=gmaps.places('yoshinoya',location=user_centroid,radius=5000)
goal_candidates
len(goal_candidates)
len(goal_candidates['results'])
candidates = goal_candidates['results']
for candidate in candidates:
    print(candidate['name'])
    
for candidate in candidates:
    print(f"{candidate['name']}\n{candidate['formatted_address']}", end='\n\n')
    
    
import haversine as hs
goal_candidates_location=[goal['geometry']['location'] for goal in candidates]
goal_candidates_location
centroid
distances=[]
goal_candidates_location_list=[tuple(loc.values()) for loc in goal_candidates_location]
goal_candidates_location_list
from haversine import Unit
for i in range(len(goal_candidates_location_list)):
    distances.append(hs.haversine(tuple(user_centroid.values()),goal_candidates_location_list[i],unit=Unit.METERS))
    
distances
distances.index(min(distances))
first=distances.pop(distances.index(min(distances)))
second=distances.pop(distances.index(min(distances)))
third=distances.pop(distances.index(min(distances)))
first
second
third
distances=[]
for i in range(len(goal_candidates_location_list)):
    distances.append(hs.haversine(tuple(user_centroid.values()),goal_candidates_location_list[i],unit=Unit.METERS))
    
distances
first=distances.index(min(distances))
distances.pop(first)
first
second=distances.index(min(distances))
distances.pop(second)
third=distances.index(min(distances))
distances.pop(third)
first
second
third
top3 = {first, second, third}
top3
top3_places = [candidates[i] for i in top3]
top3_places
top3_place_ids = [place['place_id'] for place in top3_places]
top3_place_ids
top3_place_locations = [place['geometry']['location'] for place in top3_places]
top3_place_locations
user_centroid
user_centroidhttps://maps.googleapis.com/maps/api/staticmap?center=-6.242333,106.825&zoom=10&size=1000x1000&markers=color:blue%7Clabel:S%7C-6.239055,106.8114625%7C-6.22756,106.7976%7C-6.24426,106.78380&key=AIzaSyBjSXLCqZbbrKOjvUZJxFXa4pOLYpsqdEMhttps://maps.googleapis.com/maps/api/staticmap?center=-6.242333,106.825&zoom=10&size=1000x1000&markers=color:blue%7Clabel:S%7C-6.239055,106.8114625%7C-6.22756,106.7976%7C-6.24426,106.78380&key=AIzaSyBjSXLCqZbbrKOjvUZJxFXa4pOLYpsqdEM
%save -r nearus 1-100
